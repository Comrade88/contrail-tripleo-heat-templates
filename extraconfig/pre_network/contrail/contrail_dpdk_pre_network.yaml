heat_template_version: queens

# NOTE: You don't need to pass the parameter explicitly from the
# parent template, it can be specified via the parameter_defaults
# in the resource_registry instead, if you want to override the default
# and/or share values with other templates in the tree.
parameters:
  RoleParameters:
    type: json
    description: Role Specific parameters
    default: {}
  ServiceNames:
    type: comma_delimited_list
    default: []
  deployment_actions:
    default: ['CREATE']
    type: comma_delimited_list
    description: >
      List of stack actions that will trigger any deployments in this
      templates. The actions will be an empty list of the server is in the
      toplevel DeploymentServerBlacklist parameter's value.
  server:
    type: string
  ContrailDpdkHugepages2MB
    default: '2048'
    description: Number of 2MB hugepages
    type: string
  ContrailDpdkHugepages1GB
    default: ''
    description: Number of 1GB hugepages
    type: string
  ContrailDpdkDriver:
    default: 'uio_pci_generic'
    description: DPDK Nic Driver
    type: string
  ContrailSriovOn:
    description: If SR-IOV is configured
    type: boolean
    default: false
  ContrailRegistryCertUrl:
    default: ''
    description: URL to registry certificate
    type: string
  ContrailRegistryInsecure:
    default: false
    description: Contrail Registry
    type: boolean
  ContrailRegistry:
    default: 'opencontrailnightly'
    description: Contrail Registry
    type: string
  ContrailImageTag:
    default: 'latest'
    description: Contrail container image tag
    type: string
  DockerContrailVrouterKernelInitDpdkImageName:
    description: image
    type: string
    default: "contrail-vrouter-kernel-init-dpdk"
  DockerContrailVrouterAgentDpdkImageName:
    description: image
    type: string
    default: "contrail-vrouter-agent-dpdk"
  DockerContrailVrouterAgentDpdkContainerName:
    description: image
    type: string
    default: "contrail-vrouter-agent-dpdk"
  DockerContrailVrouterAgentContainerName:
    description: image
    type: string
    default: "contrail-vrouter-agent"

description: >
  This template installs the Contrail dpdk packages in order
  to bring vhost0 interface up. Vhost0 interface must be up before
  os-net-config takes over.

conditions:
  is_host_config_required:
    or:
      - {equals: [{get_param: [RoleParameters, ContrailSriovOn]}, true]}
      - {not: {equals: [{get_param: [RoleParameters, ContrailDpdkHugepages1GB]}, ""]}}
      - {equals: [{get_param: [RoleParameters, ContrailDpdkDriver]}, "vfio-pci"]}
  is_reboot_config_required:
    or:
      - is_host_config_required
  deployment_actions_empty:
    equals:
      - {get_param: deployment_actions}
      - []

resources:
  ContrailVrouterDpdkModuleDeployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      name: ContrailVrouterDpdkModuleDeployment
      server:  {get_param: server}
      config: {get_resource: ContrailVrouterDpdkModuleConfig}
      input_values:
        contrail_dpdk_hugepages_2mb: {get_param: ContrailDpdkHugepages2MB}
        contrail_dpdk_hugepages_1gb: {get_param: ContrailDpdkHugepages1GB}
        contrail_dpdk_driver: {get_param: ContrailDpdkDriver}
        contrail_sriov_on: {get_param: ContrailSriovOn}
        contrail_registry_insecure: {get_param: ContrailRegistryInsecure}
        contrail_registry_cert_url: {get_param: ContrailRegistryCertUrl}
        contrail_registry: {get_param: ContrailRegistry}
        contrail_imagetag: {get_param: ContrailImageTag}
        contrail_vrouter_init_image: {get_param: DockerContrailVrouterKernelInitDpdkImageName}
        contrail_vrouter_agent_dpdk_image: {get_param: DockerContrailVrouterAgentDpdkImageName}
        contrail_vrouter_agent_container_name: {get_param: DockerContrailVrouterAgentContainerName}
        contrail_vrouter_agent_dpdk_container_name: {get_param: DockerContrailVrouterAgentDpdkContainerName}
      actions:
        if:
          - deployment_actions_empty
          - []
          - ['CREATE'] # Only do this on CREATE

  ContrailVrouterDpdkModuleConfig:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
      - name: contrail_dpdk_hugepages_2mb
      - name: contrail_dpdk_hugepages_1gb
      - name: contrail_dpdk_driver
      - name: contrail_sriov_on
      - name: contrail_registry_insecure
      - name: contrail_registry_cert_url
      - name: contrail_registry
      - name: contrail_imagetag
      - name: contrail_vrouter_init_image
      - name: contrail_vrouter_agent_dpdk_image
      - name: contrail_vrouter_agent_container_name
      config: |
        #!/bin/bash
        export LOGFILE=/tmp/contrail_trace_full.txt
        exec > >(tee -a $LOGFILE)
        exec 2>&1
        echo "=================== $(date) ==================="
        set -xv
        contrail_dpdk_hugepages_2mb=$contrail_dpdk_hugepages_2mb
        contrail_dpdk_hugepages_1gb=$contrail_dpdk_hugepages_1gb
        contrail_dpdk_driver=$contrail_dpdk_driver
        contrail_sriov_on=$contrail_sriov_on
        contrail_registry_insecure=$contrail_registry_insecure
        contrail_registry_cert_url=$contrail_registry_cert_url
        contrail_registry=$contrail_registry
        contrail_imagetag=$contrail_imagetag
        contrail_vrouter_init_image=$contrail_vrouter_init_image
        if [[ -n ${contrail_registry_cert_url} ]]; then
          registry_name=(${contrail_registry//:/ })
          mkdir -p /etc/docker/certs.d/${registry_name}
          (cd /etc/docker/certs.d/${registry_name}; curl -O ${contrail_registry_cert_url})
          (cd /etc/pki/ca-trust/source/anchors/; curl -O ${contrail_registry_cert_url})
          update-ca-trust
        fi
        if [[ ${contrail_registry_insecure} == 'True' ]]; then
          found=0
          registries=`cat /etc/sysconfig/docker |grep INSECURE_REGISTRY |awk -F"--insecure-registry" '{$1="";print $0;}' |tr  "\"" " "`
          for reg in $registries; do if [[ ${reg} == ${contrail_registry} ]]; then found=1; fi; done
          if [[ ${found} -eq 0 ]]; then
            registry_string=`cat /etc/sysconfig/docker |grep INSECURE_REGISTRY |awk -F"INSECURE_REGISTRY=\"" '{print $2}'|tr "\"" " "`
            registry_string="${registry_string} --insecure-registry ${contrail_registry}"
            complete_string="INSECURE_REGISTRY=\"${registry_string}\""
            echo ${complete_string}
            if [[ `grep INSECURE_REGISTRY /etc/sysconfig/docker` ]]; then
              sed -i "s/^INSECURE_REGISTRY=.*/${complete_string}/" /etc/sysconfig/docker
            else
              echo ${complete_string} >> /etc/sysconfig/docker
            fi
            systemctl restart docker
          fi
        fi
        mkdir /var/crashes
        chmod -R 755 /var/crashes
        ulimit -c unlimited
        echo "kernel.core_pattern = /var/crashes/core.%e.%p.%h.%t" >> /etc/sysctl.conf
        sysctl -p
        if [[ -z ${contrail_dpdk_hugepages_1gb} ]]; then
          echo "vm.nr_hugepages = ${dpdk_hugepages}" >> /etc/sysctl.conf
        fi
        echo "vm.max_map_count = 128960" >> /etc/sysctl.conf
        echo "net.ipv4.tcp_keepalive_time = 5" >> /etc/sysctl.conf
        echo "net.ipv4.tcp_keepalive_probes = 5" >> /etc/sysctl.conf
        echo "net.ipv4.tcp_keepalive_intvl = 1" >> /etc/sysctl.conf
        /sbin/sysctl --system
        systemctl start docker
        docker run \
            --rm \
            --privileged \
            -e "AGENT_MODE=dpdk" \
            -e "CONTRAIL_VROUTER_AGENT_DPDK_DOCKER_IMAGE=${contrail_registry}/${contrail_vrouter_agent_dpdk_image}:${contrail_imagetag}" \
            -e "CONTRAIL_VROUTER_AGENT_DPDK_CONTAINER_NAME=${contrail_vrouter_agent_dpdk_container_name}" \
            -e "CONTRAIL_VROUTER_AGENT_CONTAINER_NAME=${contrail_vrouter_agent_container_name}" \
            --name $contrail_vrouter_init_image \
            -v /dev:/dev \
            -v /etc/sysconfig/network-scripts:/etc/sysconfig/network-scripts \
            -v /lib/modules:/lib/modules \
            -v /bin:/host/bin \
            ${contrail_registry}/${contrail_vrouter_init_image}:${contrail_imagetag}

  HostParametersConfig:
    type: OS::Heat::SoftwareConfig
    condition: is_host_config_required
    properties:
      group: ansible
      inputs:
        - name: _CONTRAIL_DPDK_DRIVER_
        - name: _CONTRAIL_SRIOV_ON_
        - name: _CONTRAIL_HUGEPAGES_2MB_
        - name: _CONTRAIL_HUGEPAGES_1GB_
      outputs:
        - name: result
      config:
        get_file: contrail_ansible_host_config.yaml

  HostParametersDeployment:
    type: OS::Heat::SoftwareDeployment
    condition: is_host_config_required
    properties:
      name: HostParametersDeployment
      server:  {get_param: server}
      config: {get_resource: HostParametersConfig}
      actions:
        if:
          - deployment_actions_empty
          - []
          - ['CREATE'] # Only do this on CREATE
      input_values:
        _CONTRAIL_DPDK_DRIVER_: {get_param: [RoleParameters, ContrailDpdkDriver]}
        _CONTRAIL_SRIOV_ON_: {get_param: [RoleParameters, ContrailSriovOn]}
        _CONTRAIL_HUGEPAGES_2MB_: {get_param: [RoleParameters, ContrailHugepages2MB]}
        _CONTRAIL_HUGEPAGES_1GB_: {get_param: [RoleParameters, ContrailHugepages1GB]}
        

  RebootConfig:
    type: OS::Heat::SoftwareConfig
    condition: is_reboot_config_required
    properties:
      group: script
      config: |
        #!/bin/bash
        # Stop os-collect-config to avoid any race collecting another
        # deployment before reboot happens
        systemctl stop os-collect-config.service
        /sbin/reboot

  RebootDeployment:
    type: OS::Heat::SoftwareDeployment
    depends_on: [HostParametersDeployment, DpdkVhostGroupDeployment]
    condition: is_reboot_config_required
    properties:
      name: RebootDeployment
      server:  {get_param: server}
      config: {get_resource: RebootConfig}
      actions:
        if:
          - deployment_actions_empty
          - []
          - ['CREATE'] # Only do this on CREATE
      signal_transport: NO_SIGNAL

  RebootEnsureConfig:
    type: OS::Heat::SoftwareConfig
    condition: is_reboot_config_required
    properties:
      group: script
      config: |
        #!/bin/bash
        echo "Reboot completed"

  RebootEnsureDeployment:
    type: OS::Heat::SoftwareDeployment
    depends_on: RebootDeployment
    condition: is_reboot_config_required
    properties:
      name: RebootEnsureDeployment
      server:  {get_param: server}
      config: {get_resource: RebootEnsureConfig}
      actions:
        if:
          - deployment_actions_empty
          - []
          - ['CREATE'] # Only do this on CREATE

outputs:
  result:
    condition: is_host_config_required
    value:
      get_attr: [HostParametersDeployment, result]
  stdout:
    condition: is_host_config_required
    value:
      get_attr: [HostParametersDeployment, deploy_stdout]
  stderr:
    condition: is_host_config_required
    value:
      get_attr: [HostParametersDeployment, deploy_stderr]
  status_code:
    condition: is_host_config_required
    value:
      get_attr: [HostParametersDeployment, deploy_status_code]
