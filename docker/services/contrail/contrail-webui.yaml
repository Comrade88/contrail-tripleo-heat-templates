heat_template_version: queens

description: >
  Contrail containerized Config Webui service

parameters:
  DockerContrailWebuiWebImage:
    description: image
    type: string
  DockerContrailWebuiJobImage:
    description: image
    type: string
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  DefaultPasswords:
    default: {}
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json
  EnableInternalTLS:
    type: boolean
    default: false
  InternalTLSCAFile:
    default: '/etc/ipa/ca.crt'
    type: string
    description: Specifies the default CA cert to use if TLS is used for
                 services in the internal network.
  InternalTLSCRLPEMFile:
    default: '/etc/pki/CA/crl/overcloud-crl.pem'
    type: string
    description: Specifies the default CRL PEM file to use for revocation if
                 TLS is used for services in the internal network.

resources:

  ContainersCommon:
    type: ../containers-common.yaml


  ContrailWebuiBase:
    type: ../../../puppet/services/network/contrail-base.yaml
    properties:
      EndpointMap: {get_param: EndpointMap}
      ServiceData: {get_param: ServiceData}
      ServiceNetMap: {get_param: ServiceNetMap}
      DefaultPasswords: {get_param: DefaultPasswords}
      RoleName: {get_param: RoleName}
      RoleParameters: {get_param: RoleParameters}

conditions:
  internal_tls_enabled: {equals: [{get_param: EnableInternalTLS}, true]}

outputs:
  role_data:
    description: Role data for the Contrail Webui service.
    value:
      service_name: contrail_webui
      config_settings:
        map_merge:
          - get_attr: [ContrailWebuiBase, role_data, config_settings]
      service_config_settings:
        haproxy:
          tripleo.contrail_webui.haproxy_endpoints:
            contrail_webui:
              public_virtual_ip: "%{hiera('contrail_webui_vip')}"
              internal_ip: "%{hiera('contrail_webui_vip')}"
              service_port: 8143
              ip_addresses: "%{hiera('contrail_webui_node_ips')}"
              server_names: "%{hiera('contrail_webui_node_names')}"
              mode: 'http'
              listen_options:
                balance:
                  - 'source'
                hash-type:
                  - 'consistent'
              public_ssl_port: 8143
              service_network: {get_param: [ServiceNetMap, ContrailWebuiNetwork]}
              member_options:
                list_concat:
                  - [ 'check', 'inter 2000', 'rise 2', 'fall 5' ]
                  - if:
                      - internal_tls_enabled
                      - - 'ssl'
                        - 'verify required'
                        - list_join:
                          - ' '
                          - - 'ca-file'
                            - {get_param: InternalTLSCAFile}
                        - list_join:
                          - ' '
                          - - 'crl-file'
                            - {get_param: InternalTLSCRLPEMFile}
                      - null
      docker_config:
        step_5:
          contrail_webui_web:
            image: &contrail_webui_web_image {get_param: DockerContrailWebuiWebImage}
            net: host
            privileged: false
            detach: true
            user: root
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, volumes]}
                -
                  - /var/log/contrail:/var/log/contrail
            env_file:
              - /etc/contrail/common_webui.env
          contrail_webui_job:
            image: &contrail_webui_job_image {get_param: DockerContrailWebuiJobImage}
            net: host
            privileged: false
            detach: true
            user: root
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, volumes]}
                -
                  - /var/log/contrail:/var/log/contrail
                  - /etc/contrail
            env_file:
              - /etc/contrail/common_webui.env
      host_prep_tasks:
        - name: create contrail directories
          file: 
            path: "{{ item }}"
            state: directory
            recurse: yes
          with_items:
            - /var/log/contrail
            - /etc/contrail
        - name: register /etc/contrail/common_webui.env
          stat:
            path: /etc/contrail/common_webui.env
          register: p
        - name: create /etc/contrail/common_webui.env
          copy: 
            dest: /etc/contrail/common_webui.env
            content: ""
          when: not p.stat.exists
        - name: get keystone admin api vip
          shell: hiera -c /etc/puppet/hiera.yaml keystone_admin_api_vip
          register: keystone_admin_api_vip
        - name: get keystone public api vip
          shell: hiera -c /etc/puppet/hiera.yaml keystone_public_api_vip
          register: keystone_public_api_vip
        - name: get keystone admin password
          shell: hiera -c /etc/puppet/hiera.yaml contrail::admin_password
          register: keystone_admin_password
        - name: get keystone admin user
          shell: hiera -c /etc/puppet/hiera.yaml contrail::admin_user
          register: keystone_admin_user
        - name: get keystone admin tenant
          shell: hiera -c /etc/puppet/hiera.yaml contrail::admin_tenant_name
          register: keystone_admin_tenant
        - name: get contrail config database node ips
          shell: hiera -c /etc/puppet/hiera.yaml contrail_database_node_ips
          register: contrail_config_database_node_ips_list
        - name: turn contrail config db ips into json
          set_fact:
            contrail_config_database_node_ips_json: "{{ contrail_config_database_node_ips_list.stdout | from_json }}"
        - name: turn json into comma separated string
          set_fact:
            contrail_config_database_node_ips_string: "{{ contrail_config_database_node_ips_json | join(',') }}"
        - name: get contrail config node ips
          shell: hiera -c /etc/puppet/hiera.yaml contrail_config_node_ips
          register: contrail_config_node_ips_list
        - name: turn contrail config ips into json
          set_fact:
            contrail_config_node_ips_json: "{{ contrail_config_node_ips_list.stdout | from_json }}"
        - name: turn json into comma separated string
          set_fact:
            contrail_config_node_ips_string: "{{ contrail_config_node_ips_json | join(',') }}" 
        - name: get contrail analytics node ips
          shell: hiera -c /etc/puppet/hiera.yaml contrail_analytics_node_ips
          register: contrail_analytics_node_ips_list
        - name: turn contrail analytics ips into json
          set_fact:
            contrail_analytics_node_ips_json: "{{ contrail_analytics_node_ips_list.stdout | from_json }}"
        - name: turn json into comma separated string
          set_fact:
            contrail_analytics_node_ips_string: "{{ contrail_analytics_node_ips_json | join(',') }}"
        - name: write contrail config node ips to environment file
          lineinfile: dest=/etc/contrail/common_webui.env regexp='.*CONFIG_NODES$' line="CONFIG_NODES={{ contrail_config_node_ips_string }}" state=present
        - name: write contrail config db node ips to environment file
          lineinfile: dest=/etc/contrail/common_webui.env regexp='.*CONFIGDB_NODES$' line="CONFIGDB_NODES={{ contrail_config_database_node_ips_string }}" state=present
        - name: write contrail config db node ips to environment file
          lineinfile: dest=/etc/contrail/common_webui.env regexp='.*ZOOKEEPER_NODES$' line="ZOOKEEPER_NODES={{ contrail_config_database_node_ips_string }}" state=present
        - name: write contrail config rmq node ips to environment file
          lineinfile: dest=/etc/contrail/common_webui.env regexp='.*RABBITMQ_NODES$' line="RABBITMQ_NODES={{ contrail_config_database_node_ips_string }}" state=present
        - name: write contrail analytics node ips to environment file
          lineinfile: dest=/etc/contrail/common_webui.env regexp='.*ANALYTICS_NODES$' line="ANALYTICS_NODES={{ contrail_analytics_node_ips_string }}" state=present
        - name: write remaining contrail config env cars
          lineinfile: dest=/etc/contrail/common_webui.env line="{{ item }}" state=present
          with_items:
            - RABBITMQ_NODE_PORT=5673
            - OPENSTACK_VERSION=ocata
            - CLOUD_ORCHESTRATOR=openstack
            - AUTH_MODE=keystone
            - KEYSTONE_AUTH_HOST={{ keystone_public_api_vip.stdout }}
            - KEYSTONE_AUTH_ADMIN_PASSWORD={{ keystone_admin_password.stdout }}
            - KEYSTONE_AUTH_ADMIN_USER={{ keystone_admin_user.stdout }}
            - KEYSTONE_AUTH_ADMIN_TENANT={{ keystone_admin_tenant.stdout }}
            
      metadata_settings:
        get_attr: [ContrailWebuiBase, role_data, metadata_settings]
